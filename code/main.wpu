#!wing
#!version=5.0
##################################################################
# Wing IDE project file : User-specific branch                   #
##################################################################
[user attributes]
debug.breakpoints = {loc('main.py'): {349: (0,
        None,
        1,
        0),
                                      359: (0,
        None,
        1,
        0)}}
debug.err-values = {loc('main.py'): {}}
debug.show-args-dialog = {loc('main.py'): False}
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'FUG9HETtQ99nDcbNyQc7IRE5HP'\
        'W2zRze',
        'size-state': 'maximized',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [0,
                                   0],
                 'full-screen': False,
                 'notebook_display': 'normal',
                 'notebook_percent': 0.25,
                 'override_title': None,
                 'pagelist': [('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'expanded-nodes': [],
                                 'selected-nodes': [],
                                 'top-node': ()}},
        'tree-style': 'deep'}}),
                              ('browser',
                               'tall',
                               0,
                               {}),
                              ('snippets',
                               'tall',
                               0,
                               {}),
                              ('source-assistant',
                               'tall',
                               2,
                               {}),
                              ('debug-stack',
                               'tall',
                               1,
                               {}),
                              ('indent',
                               'tall',
                               2,
                               {})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [1,
                          1],
        'notebook_display': 'normal',
        'notebook_percent': 0.3668831168831169,
        'override_title': None,
        'pagelist': [('batch-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': u'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': '',
                                       'fReverse': False,
                                       'fSearchText': '',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': u'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': '',
                                       'fReverse': False,
                                       'fSearchText': u'family',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('debug-breakpoints',
                      'wide',
                      0,
                      {}),
                     ('testing',
                      'wide',
                      0,
                      {}),
                     ('debug-io',
                      'wide',
                      1,
                      {}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 1046,
                       'folded-linenos': [],
                       'history': {u'file:c:/Users/Isaac/Desktop/github/ubiome/ubiome_longitudinal_analysis/code/main.py': ['f'\
        'amily\n',
        "plt.clf()\nplt.stackplot(rr, r)\nplt.legend(family)\nplt.ylim([0,10"\
        "0])\nplt.title('Family Percent of Sample, Stacked')\nplt.ylabel('Pe"\
        "rcent of Sample')\nplt.xlabel('Date')\nplt.savefig(os.path.join(bas"\
        "eDir, 'family percent of sample - stacked.png'))\n\n",
        'os.path.curdir\n',
        'os.path.abspath(os.path.curdir)\n',
        "matplotlib.cm.get_cmap('Blues', 9)\n",
        "plt.clf()\ncolormap = matplotlib.cm.get_cmap('viridis', 9)\nbounds="\
        "np.linspace(r.min(), r.max(), 9)\nnorm = colors.BoundaryNorm(bounds"\
        ", cmap.N)    \nplt.matshow(r, aspect='auto', cmap=colormap, norm=no"\
        "rm, matplotlib.colors.LogNorm(vmin=0.1, vmax=100)); plt.colorbar()"\
        "\nplt.yticks(np.arange(r.shape[0]), genii, size='xx-small')\nplt.xl"\
        "abel('Sample Number'); plt.grid(False)\nplt.title('Genus Heatmap [P"\
        "ercent]')\nplt.savefig(os.path.join(baseDir, 'genus heatmap - virid"\
        "is.png'))\nplt.close()\n\n",
        "colormap = matplotlib.cm.get_cmap('viridis', 9)\n",
        'bounds=np.linspace(r.min(), r.max(), 9)\n',
        'norm = colors.BoundaryNorm(bounds, colormap.N)    \n',
        'norm = matplotlib.colors.BoundaryNorm(bounds, colormap.N)   \n',
        "plt.matshow(r, aspect='auto', cmap=colormap, norm=norm, matplotlib."\
        "colors.LogNorm(vmin=0.1, vmax=100)); plt.colorbar()\nplt.yticks(np."\
        "arange(r.shape[0]), genii, size='xx-small')\nplt.xlabel('Sample Num"\
        "ber'); plt.grid(False)\nplt.title('Genus Heatmap [Percent]')\nplt.s"\
        "avefig(os.path.join(baseDir, 'genus heatmap - viridis.png'))\nplt.c"\
        "lose()\n\n",
        "plt.matshow(r, aspect='auto', cmap=colormap, norm=norm, matplotlib."\
        "colors.LogNorm(vmin=0.1, vmax=100)); plt.colorbar()\n",
        "plt.matshow(r, aspect='auto', cmap=colormap, norm=norm, matplotlib."\
        "colors.LogNorm(vmin=0.1, vmax=100)); \n",
        "plt.clf()\ncolormap = matplotlib.cm.get_cmap('viridis', 9) \nplt.ma"\
        "tshow(r, aspect='auto', cmap=colormap, interpolation='None', matplo"\
        "tlib.colors.LogNorm(vmin=0.1, vmax=100)); plt.colorbar()\nplt.ytick"\
        "s(np.arange(r.shape[0]), genii, size='xx-small')\nplt.xlabel('Sampl"\
        "e Number'); plt.grid(False)\nplt.title('Genus Heatmap [Percent]')\n"\
        "plt.savefig(os.path.join(baseDir, 'genus heatmap - viridis.png'))\n"\
        "plt.close()\n\n",
        "matplotlib.cm.get_cmap('viridis', 9)\n",
        'tmp.colors\n',
        "tmp = matplotlib.cm.get_cmap('Blues', 9)\n",
        'tmp\n',
        "tmp = matplotlib.cm.get_cmap('viridis', 9)\n",
        'tmp.N\n',
        'tmp.name\n',
        "plt.clf() \nplt.matshow(r, aspect='auto', cmap=matplotlib.cm.get_cm"\
        "ap('viridis'), norm=matplotlib.colors.LogNorm(vmin=0.1, vmax=100));"\
        " plt.colorbar()\nplt.yticks(np.arange(r.shape[0]), genii, size='xx-"\
        "small')\nplt.xlabel('Sample Number'); plt.grid(False)\nplt.title('G"\
        "enus Heatmap [Percent]')\nplt.savefig(os.path.join(baseDir, 'genus "\
        "heatmap - viridis.png'))\nplt.close()\n\n",
        "plt.clf() \nplt.matshow(r, aspect='auto', cmap=matplotlib.cm.get_cm"\
        "ap('afmhot'), norm=matplotlib.colors.LogNorm(vmin=0.1, vmax=100)); "\
        "plt.colorbar()\nplt.yticks(np.arange(r.shape[0]), genii, size='xx-s"\
        "mall')\nplt.xlabel('Sample Number'); plt.grid(False)\nplt.title('Ge"\
        "nus Heatmap [Percent]')\nplt.savefig(os.path.join(baseDir, 'genus h"\
        "eatmap - viridis.png'))\nplt.close()\n\n",
        "plt.clf() \nplt.matshow(r, aspect='auto', cmap=matplotlib.cm.get_cm"\
        "ap('pubugn'), norm=matplotlib.colors.LogNorm(vmin=0.1, vmax=100)); "\
        "plt.colorbar()\nplt.yticks(np.arange(r.shape[0]), genii, size='xx-s"\
        "mall')\nplt.xlabel('Sample Number'); plt.grid(False)\nplt.title('Ge"\
        "nus Heatmap [Percent]')\nplt.savefig(os.path.join(baseDir, 'genus h"\
        "eatmap - viridis.png'))\nplt.close()\n\n",
        "''\n",
        "plt.clf() \nplt.matshow(r, aspect='auto', cmap=matplotlib.cm.get_cm"\
        "ap('PuBuGn'), norm=matplotlib.colors.LogNorm(vmin=0.1, vmax=100)); "\
        "plt.colorbar()\nplt.yticks(np.arange(r.shape[0]), genii, size='xx-s"\
        "mall')\nplt.xlabel('Sample Number'); plt.grid(False)\nplt.title('Ge"\
        "nus Heatmap [Percent]')\nplt.savefig(os.path.join(baseDir, 'genus h"\
        "eatmap - viridis.png'))\nplt.close()\n\n",
        "plt.clf() \nplt.matshow(r, aspect='auto', cmap=matplotlib.cm.get_cm"\
        "ap('PuBuGn', 9), norm=matplotlib.colors.LogNorm(vmin=0.1, vmax=100)"\
        "); plt.colorbar()\nplt.yticks(np.arange(r.shape[0]), genii, size='x"\
        "x-small')\nplt.xlabel('Sample Number'); plt.grid(False)\nplt.title("\
        "'Genus Heatmap [Percent]')\nplt.savefig(os.path.join(baseDir, 'genu"\
        "s heatmap - viridis.png'))\nplt.close()\n\n",
        "plt.clf() \nplt.matshow(r, aspect='auto', cmap=matplotlib.cm.get_cm"\
        "ap('Paired', 9), norm=matplotlib.colors.LogNorm(vmin=0.1, vmax=100)"\
        "); plt.colorbar()\nplt.yticks(np.arange(r.shape[0]), genii, size='x"\
        "x-small')\nplt.xlabel('Sample Number'); plt.grid(False)\nplt.title("\
        "'Genus Heatmap [Percent]')\nplt.savefig(os.path.join(baseDir, 'genu"\
        "s heatmap - viridis.png'))\nplt.close()\n\n",
        "plt.clf() \nplt.matshow(r, aspect='auto', cmap=matplotlib.cm.get_cm"\
        "ap('Set1', 9), norm=matplotlib.colors.LogNorm(vmin=0.1, vmax=100));"\
        " plt.colorbar()\nplt.yticks(np.arange(r.shape[0]), genii, size='xx-"\
        "small')\nplt.xlabel('Sample Number'); plt.grid(False)\nplt.title('G"\
        "enus Heatmap [Percent]')\nplt.savefig(os.path.join(baseDir, 'genus "\
        "heatmap - alt colormap.png'))\nplt.close()\n\n",
        "plt.clf() \nplt.matshow(r, aspect='auto', cmap=matplotlib.cm.get_cm"\
        "ap('YlGnBu', 9), norm=matplotlib.colors.LogNorm(vmin=0.1, vmax=100)"\
        "); plt.colorbar()\nplt.yticks(np.arange(r.shape[0]), genii, size='x"\
        "x-small')\nplt.xlabel('Sample Number'); plt.grid(False)\nplt.title("\
        "'Genus Heatmap [Percent]')\nplt.savefig(os.path.join(baseDir, 'genu"\
        "s heatmap - alt colormap.png'))\nplt.close()\n\n",
        "plt.clf() \nplt.matshow(r, aspect='auto', cmap=matplotlib.cm.get_cm"\
        "ap('inferno', 9), norm=matplotlib.colors.LogNorm(vmin=0.1, vmax=100"\
        ")); plt.colorbar()\nplt.yticks(np.arange(r.shape[0]), genii, size='"\
        "xx-small')\nplt.xlabel('Sample Number'); plt.grid(False)\nplt.title"\
        "('Genus Heatmap [Percent]')\nplt.savefig(os.path.join(baseDir, 'gen"\
        "us heatmap - alt colormap.png'))\nplt.close()\n\n",
        "plt.clf() \nplt.matshow(r, aspect='auto', cmap=matplotlib.cm.get_cm"\
        "ap('ocean', 9), norm=matplotlib.colors.LogNorm(vmin=0.1, vmax=100))"\
        "; plt.colorbar()\nplt.yticks(np.arange(r.shape[0]), genii, size='xx"\
        "-small')\nplt.xlabel('Sample Number'); plt.grid(False)\nplt.title('"\
        "Genus Heatmap [Percent]')\nplt.savefig(os.path.join(baseDir, 'genus"\
        " heatmap - alt colormap.png'))\nplt.close()\n\n",
        "plt.clf() \nplt.matshow(r, aspect='auto', cmap=matplotlib.cm.get_cm"\
        "ap('cubehelix', 9), norm=matplotlib.colors.LogNorm(vmin=0.1, vmax=1"\
        "00)); plt.colorbar()\nplt.yticks(np.arange(r.shape[0]), genii, size"\
        "='xx-small')\nplt.xlabel('Sample Number'); plt.grid(False)\nplt.tit"\
        "le('Genus Heatmap [Percent]')\nplt.savefig(os.path.join(baseDir, 'g"\
        "enus heatmap - alt colormap.png'))\nplt.close()\n\n",
        "plt.clf() \nplt.matshow(r, aspect='auto', cmap=matplotlib.cm.get_cm"\
        "ap('cubehelix_r', 9), norm=matplotlib.colors.LogNorm(vmin=0.1, vmax"\
        "=100)); plt.colorbar()\nplt.yticks(np.arange(r.shape[0]), genii, si"\
        "ze='xx-small')\nplt.xlabel('Sample Number'); plt.grid(False)\nplt.t"\
        "itle('Genus Heatmap [Percent]')\nplt.savefig(os.path.join(baseDir, "\
        "'genus heatmap - alt colormap.png'))\nplt.close()\n\n",
        'plt.show()\n',
        'plt.clf()\n',
        'plt.imshow(r)\n',
        'np.sum(r, axis=0)\n',
        'len(r)\n',
        'r\n',
        'len(rr)\n',
        'numSamples = len(rr)\nmat = np.zeros((numSamples, numSamples))\nfor'\
        ' k in range(numSamples):\n    for kk in range(numSamples):\n       '\
        ' mat[k,kk] = sp.stats.entropy(rr[:,k], rr[:,kk])\n\n',
        'mat = np.zeros((numSamples, numSamples))\n',
        'numSamples\n',
        'for k in range(numSamples):\n    for kk in range(numSamples):\n    '\
        '    mat[k,kk] = sp.stats.entropy(rr[:,k], rr[:,kk])\n\n',
        'kk\n',
        'rr[:,k]\n',
        'k\n',
        'rr\n',
        'numSamples = len(rr)\nmat = np.zeros((numSamples, numSamples))\nfor'\
        ' k in range(numSamples):\n    for kk in range(numSamples):\n       '\
        ' mat[k,kk] = sp.stats.entropy(r[:,k], r[:,kk])\n\n',
        'numSamples = len(rr)\nmat = np.zeros((numSamples, numSamples))\nfor'\
        ' k in range(numSamples):\n    for kk in range(numSamples):\n       '\
        ' mat[k,kk] = sp.stats.entropy(r[:,k]/100, r[:,kk]/100)\n\n',
        'r[:,0]\n',
        'r[:,0].sum()\n',
        'sp.stats.entropy(r[:,0]/100, r[:,1]/100)\n',
        'r[:,1]\n',
        'numSamples = len(rr)\nmat = np.zeros((numSamples, numSamples))\nfor'\
        ' k in range(numSamples):\n    for kk in range(numSamples):\n       '\
        ' mat[k,kk] = sp.stats.entropy(r[:,k]/100 + 1e-6, r[:,kk]/100 + 1e-6'\
        ')\n\n',
        'numSamples = len(rr)\nmat = np.zeros((numSamples, numSamples))\nfor'\
        ' k in range(numSamples):\n    for kk in range(numSamples):\n       '\
        ' mat[k,kk] = np.mean((r[:,k] - r[:,kk])**2)\n\n',
        'np.corrcoef(r[:,0], r[:,1])\n',
        'np.corrcoef(r[:,0], r[:,2])\n',
        'np.corrcoef(r[:,0], r[:,3])\n',
        'numSamples = len(rr)\nmat = np.zeros((numSamples, numSamples))\nfor'\
        ' k in range(numSamples):\n    for kk in range(numSamples):\n       '\
        ' #mat[k,kk] = np.mean((r[:,k] - r[:,kk])**2)\n        mat[k,kk] = n'\
        'p.corrcoef(r[:,k], r[:,kk])[1,0]\n\n',
        'plt.colorbar()\n',
        'numSamples = len(rr)\nref = np.median(r, axis=1)\nmat = np.zeros((n'\
        'umSamples, numSamples))\nfor k in range(numSamples):\n    #mat[k,kk'\
        '] = np.mean((r[:,k] - r[:,kk])**2)\n    mat[k,kk] = np.corrcoef(ref'\
        ' r[:,k])[1,0]\n\n',
        'numSamples = len(rr)\nref = np.median(r, axis=1)\nmat = np.zeros((n'\
        'umSamples, numSamples))\nfor k in range(numSamples):\n    #mat[k,kk'\
        '] = np.mean((r[:,k] - r[:,kk])**2)\n    mat[k,kk] = np.corrcoef(ref'\
        ', r[:,k])[1,0]\n\n',
        'ref\n',
        'ref.shape\n',
        'np.corrcoef(ref, r[:,k])\n',
        'numSamples = len(rr)\nref = np.mean(r, axis=1)\nmat = np.zeros((num'\
        'Samples, numSamples))\nfor k in range(numSamples):\n    #mat[k,kk] '\
        '= np.mean((r[:,k] - r[:,kk])**2)\n    mat[k,kk] = np.corrcoef(ref, '\
        'r[:,k])[1,0]\n\n',
        'mat\n',
        'numSamples = len(rr)\nref = np.mean(r, axis=1)\nmat = np.zeros((num'\
        'Samples, ))\nfor k in range(numSamples):\n    #mat[k,kk] = np.mean('\
        '(r[:,k] - r[:,kk])**2)\n    mat[k] = np.corrcoef(ref, r[:,k])[1,0]'\
        '\n\n',
        'numSamples = len(rr)\nref = np.median(r, axis=1)\nmat = np.zeros((n'\
        'umSamples, ))\nfor k in range(numSamples):\n    #mat[k,kk] = np.mea'\
        'n((r[:,k] - r[:,kk])**2)\n    mat[k] = np.corrcoef(ref, r[:,k])[1,0'\
        ']\n\n',
        'plt.imshow(mat)\n',
        'plt.plot(mat)\n',
        "numSamples = len(rr)\nref = np.median(r, axis=1)\nmat = np.zeros((n"\
        "umSamples, ))\nfor k in range(numSamples):\n    mat[k] = np.corrcoe"\
        "f(ref, r[:,k])[1,0]\nplt.clf()\nplt.plot(mat)\n#plt.legend(family, "\
        "bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\nplt.ylim([0,1])"\
        "\nplt.title('Family Similarity Compared to Median')\nplt.ylabel('Si"\
        "milarity [0,1]')\nplt.xlabel('Date')\nplt.savefig(os.path.join(base"\
        "Dir, 'family similarity to median.png'))\n\n",
        "numSamples = len(rr)\nref = np.median(r, axis=1)\nmat = np.zeros((n"\
        "umSamples, ))\nfor k in range(numSamples):\n    mat[k] = np.corrcoe"\
        "f(ref, r[:,k])[1,0]\nplt.clf()\nplt.plot(rr. mat)\n#plt.legend(fami"\
        "ly, bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\nplt.ylim([0"\
        ",1])\nplt.title('Family Similarity Compared to Median')\nplt.ylabel"\
        "('Similarity [0,1]')\nplt.xlabel('Date')\nplt.savefig(os.path.join("\
        "baseDir, 'family similarity to median.png'))\n\n",
        "numSamples = len(rr)\nref = np.median(r, axis=1)\nmat = np.zeros((n"\
        "umSamples, ))\nfor k in range(numSamples):\n    mat[k] = np.corrcoe"\
        "f(ref, r[:,k])[1,0]\nplt.clf()\nplt.plot(rr, mat)\n#plt.legend(fami"\
        "ly, bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\nplt.ylim([0"\
        ",1])\nplt.title('Family Similarity Compared to Median')\nplt.ylabel"\
        "('Similarity [0,1]')\nplt.xlabel('Date')\nplt.savefig(os.path.join("\
        "baseDir, 'family similarity to median.png'))\n\n"]},
                       'launch-id': None,
                       'sel-line': 1060,
                       'sel-line-start': 66356,
                       'selection_end': 66356,
                       'selection_start': 66356}),
                     ('debug-watch',
                      'wide',
                      1,
                      {'node-states': [],
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 0,
                       'folded-linenos': [],
                       'history': {},
                       'launch-id': None,
                       'sel-line': 2,
                       'sel-line-start': 157,
                       'selection_end': 157,
                       'selection_start': 157}),
                     ('bookmarks',
                      'wide',
                      1,
                      {}),
                     ('messages',
                      'wide',
                      2,
                      {}),
                     ('os-command',
                      'wide',
                      1,
                      {})],
        'primary_view_state': {'editor_states': ({'bookmarks': ([[loc('../../../../../../../Python34/Lib/site-packages/matplotlib/colors.py'),
        {'attrib-starts': [('ColorConverter',
                            242),
                           ('ColorConverter.to_rgba',
                            333)],
         'first-line': 346,
         'folded-linenos': [],
         'sel-line': 375,
         'sel-line-start': 13600,
         'selection_end': 13600,
         'selection_start': 13600},
        1470188909.755],
        [loc('main.py'),
         {'attrib-starts': [('stackplotTest',
                             17)],
          'first-line': 198,
          'folded-linenos': [],
          'sel-line': 218,
          'sel-line-start': 7442,
          'selection_end': 7463,
          'selection_start': 7463},
         1470189372.054],
        [loc('../../../../../../../Python34/Lib/site-packages/matplotlib/colors.py'),
         {'attrib-starts': [('ColorConverter',
                             242),
                            ('ColorConverter.to_rgba',
                             333)],
          'first-line': 346,
          'folded-linenos': [],
          'sel-line': 375,
          'sel-line-start': 13600,
          'selection_end': 13600,
          'selection_start': 13600},
         1470189374.232],
        [loc('main.py'),
         {'attrib-starts': [('stackplotTest',
                             17)],
          'first-line': 198,
          'folded-linenos': [],
          'sel-line': 215,
          'sel-line-start': 7329,
          'selection_end': 7729,
          'selection_start': 7329},
         1470189883.908],
        [loc('../../../../../../../Python34/Lib/site-packages/matplotlib/cm.py'),
         {'attrib-starts': [('get_cmap',
                             137)],
          'first-line': 136,
          'folded-linenos': [],
          'sel-line': 165,
          'sel-line-start': 4796,
          'selection_end': 4796,
          'selection_start': 4796},
         1470189891.043],
        [loc('main.py'),
         {'attrib-starts': [('stackplotTest',
                             17)],
          'first-line': 198,
          'folded-linenos': [],
          'sel-line': 215,
          'sel-line-start': 7329,
          'selection_end': 7738,
          'selection_start': 7329},
         1470190239.803],
        [loc('../../../../../../../Python34/Lib/site-packages/matplotlib/colors.py'),
         {'attrib-starts': [('ColorConverter',
                             242),
                            ('ColorConverter.to_rgba',
                             333)],
          'first-line': 346,
          'folded-linenos': [],
          'sel-line': 375,
          'sel-line-start': 13600,
          'selection_end': 13600,
          'selection_start': 13600},
         1470190245.783],
        [loc('main.py'),
         {'attrib-starts': [('stackplotTest',
                             17)],
          'first-line': 208,
          'folded-linenos': [],
          'sel-line': 236,
          'sel-line-start': 8324,
          'selection_end': 8366,
          'selection_start': 8356},
         1470191153.482],
        [loc('main.py'),
         {'attrib-starts': [('stackplotTest',
                             17)],
          'first-line': 221,
          'folded-linenos': [],
          'sel-line': 238,
          'sel-line-start': 8411,
          'selection_end': 8431,
          'selection_start': 8431},
         1470191160.541],
        [loc('main.py'),
         {'attrib-starts': [('stackplotTest',
                             17)],
          'first-line': 221,
          'folded-linenos': [],
          'sel-line': 239,
          'sel-line-start': 8435,
          'selection_end': 8501,
          'selection_start': 8491},
         1470191161.031],
        [loc('main.py'),
         {'attrib-starts': [('stackplotTest',
                             17)],
          'first-line': 136,
          'folded-linenos': [],
          'sel-line': 141,
          'sel-line-start': 4184,
          'selection_end': 4216,
          'selection_start': 4210},
         1470278101.822],
        [loc('main.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 20,
          'sel-line-start': 266,
          'selection_end': 308,
          'selection_start': 308},
         1470278114.504],
        [loc('main.py'),
         {'attrib-starts': [('stackplotTest',
                             17)],
          'first-line': 113,
          'folded-linenos': [],
          'sel-line': 141,
          'sel-line-start': 4184,
          'selection_end': 4216,
          'selection_start': 4210},
         1470278115.547],
        [loc('main.py'),
         {'attrib-starts': [('stackplotTest',
                             17)],
          'first-line': 127,
          'folded-linenos': [],
          'sel-line': 145,
          'sel-line-start': 4341,
          'selection_end': 4363,
          'selection_start': 4357},
         1470278117.312],
        [loc('main.py'),
         {'attrib-starts': [('stackplotTest',
                             17)],
          'first-line': 138,
          'folded-linenos': [],
          'sel-line': 156,
          'sel-line-start': 4765,
          'selection_end': 4795,
          'selection_start': 4789},
         1470278118.023],
        [loc('main.py'),
         {'attrib-starts': [('stackplotTest',
                             17)],
          'first-line': 138,
          'folded-linenos': [],
          'sel-line': 158,
          'sel-line-start': 4837,
          'selection_end': 4895,
          'selection_start': 4889},
         1470278118.382],
        [loc('main.py'),
         {'attrib-starts': [('stackplotTest',
                             17)],
          'first-line': 138,
          'folded-linenos': [],
          'sel-line': 161,
          'sel-line-start': 4980,
          'selection_end': 5010,
          'selection_start': 5004},
         1470278118.591],
        [loc('main.py'),
         {'attrib-starts': [('stackplotTest',
                             17)],
          'first-line': 138,
          'folded-linenos': [],
          'sel-line': 163,
          'sel-line-start': 5074,
          'selection_end': 5122,
          'selection_start': 5116},
         1470278118.775],
        [loc('main.py'),
         {'attrib-starts': [('stackplotTest',
                             17)],
          'first-line': 325,
          'folded-linenos': [],
          'sel-line': 343,
          'sel-line-start': 12262,
          'selection_end': 12488,
          'selection_start': 12262},
         1470279641.367],
        [loc('../../../../../../../Python34/Lib/site-packages/matplotlib/image.py'),
         {'attrib-starts': [('_AxesImageBase',
                             62),
                            ('_AxesImageBase.set_data',
                             434)],
          'first-line': 423,
          'folded-linenos': [],
          'sel-line': 452,
          'sel-line-start': 15459,
          'selection_end': 15459,
          'selection_start': 15459},
         1470279653.039]],
        20),
        'current-loc': loc('main.py'),
        'editor-state-list': [(loc('../../../../../../../Program Files (x86)/Wing IDE 5.1/resources/doc/en/TOC.idx'),
                               {'displayed-index': 27,
                                'viewer-state': {'history': [-1,
        27],
        'history-pos': 1,
        'index': 27,
        'top': 0}}),
                              (loc('../../../../../../../Python34/Lib/site-packages/matplotlib/image.py'),
                               {'attrib-starts': [('_AxesImageBase',
        62),
        ('_AxesImageBase.set_data',
         434)],
                                'first-line': 423,
                                'folded-linenos': [],
                                'sel-line': 452,
                                'sel-line-start': 15459,
                                'selection_end': 15459,
                                'selection_start': 15459}),
                              (loc('main.py'),
                               {'attrib-starts': [('stackplotTest',
        17)],
                                'first-line': 325,
                                'folded-linenos': [],
                                'sel-line': 350,
                                'sel-line-start': 12470,
                                'selection_end': 12544,
                                'selection_start': 12544})],
        'has-focus': False,
        'locked': False},
        [loc('../../../../../../../Program Files (x86)/Wing IDE 5.1/resources/doc/en/TOC.idx'),
         loc('../../../../../../../Python34/Lib/site-packages/matplotlib/image.py'),
         loc('main.py')]),
                               'open_files': [u'../../../../../../../Program Files (x86)/Wing IDE 5.1/resources/doc/en/TOC.idx',
        u'main.py']},
        'saved_notebook_display': None,
        'split_percents': {0: 0.26955307262569833},
        'splits': 2,
        'tab_location': 'top',
        'user_data': {}},
                 'saved_notebook_display': None,
                 'split_percents': {0: 0.5},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (0,
                         -1,
                         1900,
                         1060)}]}
guimgr.recent-documents = [loc('main.py'),
                           loc('../../../../../../../Python34/Lib/site-packages/matplotlib/image.py')]
proj.build-cmd = {None: ('default',
                         None)}
proj.env-vars = {None: ('default',
                        [u''])}
search.search-history = [u'family',
                         u'identified',
                         u'genus heat',
                         u'genus',
                         u'show()',
                         u'class percent',
                         u'species heatmap']
testing.stored-results = (1,
                          [],
                          {})
